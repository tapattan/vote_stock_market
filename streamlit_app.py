import streamlit as st
import pandas as pd
import os
from datetime import datetime
import plotly.express as px

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå CSV ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
CSV_FILE = "daily_votes.csv"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏ß‡∏ï
def load_votes(current_date=""):
    if os.path.exists(CSV_FILE):
        df = pd.read_csv(CSV_FILE)
        if current_date == "":
            return df
        return df[df["Date"] == current_date]
    else:
        return pd.DataFrame(columns=["Date", "Question", "Vote"])

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏ß‡∏ï
def save_vote(date, question, vote):
    df = load_votes()
    new_vote = pd.DataFrame([{"Date": date, "Question": question, "Vote": vote}])
    df = pd.concat([df, new_vote], ignore_index=True)
    df.to_csv(CSV_FILE, index=False)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á session state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏ß‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
if "has_voted" not in st.session_state:
    st.session_state["has_voted"] = False
if "vote_choice" not in st.session_state:
    st.session_state["vote_choice"] = None

# CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
button_style = """
    <style>
    /* ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ó‡∏¥‡∏á (‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß) */
    div.stButton > button[data-testid="stButton-bull"] {
        background-color: #4CAF50; /* ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß */
        color: white;
        font-size: 20px;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        padding: 10px 20px;
        cursor: pointer;
    }
    div.stButton > button[data-testid="stButton-bull"]:hover {
        background-color: #388E3C; /* ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏° */
    }

    /* ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏°‡∏µ (‡∏™‡∏µ‡πÅ‡∏î‡∏á) */
    div.stButton > button[data-testid="stButton-bear"] {
        background-color: #f44336; /* ‡∏™‡∏µ‡πÅ‡∏î‡∏á */
        color: white;
        font-size: 20px;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        padding: 10px 20px;
        cursor: pointer;
    }
    div.stButton > button[data-testid="stButton-bear"]:hover {
        background-color: #d32f2f; /* ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏° */
    }
    </style>
"""

# ‡πÉ‡∏™‡πà CSS ‡∏•‡∏á‡πÉ‡∏ô Streamlit
st.markdown(button_style, unsafe_allow_html=True)

# ‡∏™‡πà‡∏ß‡∏ô UI
st.title("‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏´‡∏ß‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
st.write("‡πÇ‡∏´‡∏ß‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏î‡πâ!")

# ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
question = "‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ? (‡∏Å‡∏£‡∏∞‡∏ó‡∏¥‡∏á / ‡∏´‡∏°‡∏µ)"
current_date = datetime.now().strftime("%Y-%m-%d")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏ß‡∏ï
votes_data = load_votes(current_date)


#if not st.session_state["has_voted"]:
if not st.session_state.get("has_voted", False):
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    st.subheader(f"‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {current_date}")
    st.write(question)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‡∏Å‡∏£‡∏∞‡∏ó‡∏¥‡∏á üêÇ", key="bull"):
            save_vote(current_date, question, "‡∏Å‡∏£‡∏∞‡∏ó‡∏¥‡∏á")
            st.session_state["has_voted"] = True
            st.session_state["vote_choice"] = "‡∏Å‡∏£‡∏∞‡∏ó‡∏¥‡∏á"
            # st.experimental_rerun() fix bug ‡∏Å‡∏£‡∏ì‡∏µ deploy ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ 

    with col2:
        if st.button("‡∏´‡∏°‡∏µ üêª", key="bear"):
            save_vote(current_date, question, "‡∏´‡∏°‡∏µ")
            st.session_state["has_voted"] = True
            st.session_state["vote_choice"] = "‡∏´‡∏°‡∏µ"
            # st.experimental_rerun()

#if st.session_state["has_voted"]:
if st.session_state.get("has_voted", False):
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    st.subheader("‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    st.write(f"‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏´‡∏ß‡∏ï: **{st.session_state['vote_choice']}**")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    st.subheader("‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    if not votes_data.empty:
        grouped_votes = votes_data.groupby(["Date", "Vote"]).size().reset_index(name="Count")
        st.write("**‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô**")
        st.dataframe(grouped_votes)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Bar Chart
        st.subheader("‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï")
        grouped_votes["Date"] = pd.to_datetime(grouped_votes["Date"]).dt.strftime("%Y-%m-%d")
        bar_chart = px.bar(
            grouped_votes,
            x="Date",
            y="Count",
            color="Vote",
            barmode="group",
            labels={"Date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "Count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏´‡∏ß‡∏ï", "Vote": "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"},
            title="‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô",
        )
        st.plotly_chart(bar_chart)


        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        votes_data = load_votes()
        votes_data["Score"] = votes_data["Vote"].apply(lambda x: 1 if x == "‡∏Å‡∏£‡∏∞‡∏ó‡∏¥‡∏á" else -1)
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
        daily_summary = votes_data.groupby("Date")["Score"].sum().reset_index()
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ cumsum
        daily_summary["Cumulative Score"] = daily_summary["Score"].cumsum()
        # ‡πÅ‡∏™‡∏î‡∏á DataFrame
        st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        st.dataframe(daily_summary)
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
        st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (Cumulative Sum)")
        line_chart = px.line(
            daily_summary,
            x="Date",
            y="Cumulative Score",
            labels={"Date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "Cumulative Score": "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°"},
            title="‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (Cumulative Sum)",
        )
        st.plotly_chart(line_chart)

    else:
        st.write("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")

    # ‡∏õ‡∏∏‡πà‡∏° Reset
    if st.button("back"):
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ session_state ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        st.session_state["has_voted"] = False
        st.session_state["vote_choice"] = None

        # st.experimental_rerun()
        # st.session_state.clear()
